# Services configuration
services:
  # WordPress service configuration
  wordpress:
    build:
      context: .
      dockerfile: Dockerfile.wordpress  # Using multi-stage build for optimization
    ports:
      - "80:80"  # Exposes port 80 on the host, mapped to container port 80
    restart: always  # Ensures the container restarts automatically if it fails
    environment:
      - WORDPRESS_DB_HOST=mariadb  # Points to the database service by its name
      - WORDPRESS_DB_USER=wordpress  # Database user for WordPress
      - WORDPRESS_DB_PASSWORD=wordpress  # Database password for WordPress user
      - WORDPRESS_DB_NAME=wordpress  # Name of the database WordPress will use
      - WORDPRESS_REDIS_HOST=redis  # Points to the Redis service
      - WORDPRESS_REDIS_PASSWORD=wordpress_redis  # Redis password
    depends_on:
      - mariadb  # Ensures the WordPress container starts after the MariaDB container
      - redis    # Ensures the WordPress container starts after the Redis container
    networks:
      - wp_network  # Connects to the defined network

  # MariaDB service configuration
  mariadb:
    image: mariadb:10  # Using official MariaDB 10 image
    restart: always  # Ensures the container restarts automatically if it fails
    environment:
      - MYSQL_ROOT_PASSWORD=wordpress  # Root password for MariaDB
      - MYSQL_DATABASE=wordpress  # Creates a database named 'wordpress'
      - MYSQL_USER=wordpress  # Creates a user named 'wordpress'
      - MYSQL_PASSWORD=wordpress  # Sets password for the 'wordpress' user
    volumes:
      - db_data:/var/lib/mysql  # Persists the database data using a named volume
    networks:
      - wp_network  # Connects to the defined network

  # Redis service configuration
  redis:
    image: redis:7.2-alpine  # Using Alpine-based Redis 7.2 for smaller image size
    restart: always  # Ensures the container restarts automatically if it fails
    command: ["redis-server", "--requirepass", "wordpress_redis"]  # Set Redis password
    ports:
      - "6379:6379"  # Expose Redis port (optional, for external access)
    volumes:
      - redis_data:/data  # Persists Redis data using a named volume
    networks:
      - wp_network  # Connects to the defined network

  # phpMyAdmin service configuration
  phpmyadmin:
    build:
      context: .
      dockerfile: Dockerfile.phpmyadmin  # Using multi-stage build for optimization
    restart: always  # Ensures the container restarts automatically if it fails
    ports:
      - "8080:80"  # Exposes port 8080 on the host, mapped to container port 80
    environment:
      - PMA_HOST=mariadb  # Points to the MariaDB service by its name
      - PMA_USER=wordpress  # Same as WordPress database user
      - PMA_PASSWORD=wordpress  # Same as WordPress database password
    depends_on:
      - mariadb  # Ensures phpMyAdmin starts after the MariaDB container
    networks:
      - wp_network  # Connects to the defined network

# Volumes configuration
volumes:
  db_data:  # Named volume for persisting MariaDB data across container restarts
    # No additional configuration needed for a simple local volume
  redis_data:  # Named volume for persisting Redis data across container restarts
    # No additional configuration needed for a simple local volume

# Networks configuration
networks:
  wp_network:  # Custom network for the three services to communicate
    driver: bridge  # Uses the standard bridge network driver
