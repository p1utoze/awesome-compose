# Services configuration
services:
  # NGINX reverse proxy service
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"  # Exposes port 80 on the host, mapped to container port 80
      - "443:443"  # For HTTPS
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # For SSL certificates
    depends_on:
      - wordpress-1
      - wordpress-2
      - wordpress-3
    networks:
      - wp_network
    restart: always  # Ensures the container restarts automatically if it fails

  # WordPress service configurations (3 instances)
  wordpress-1:
    build:
      context: .
      dockerfile: Dockerfile.wordpress  # Using multi-stage build for optimization
    restart: always  # Ensures the container restarts automatically if it fails
    environment:
      - WORDPRESS_DB_HOST=${WORDPRESS_DB_HOST}
      - WORDPRESS_DB_USER=${WORDPRESS_DB_USER}
      - WORDPRESS_DB_PASSWORD=${WORDPRESS_DB_PASSWORD}
      - WORDPRESS_DB_NAME=${WORDPRESS_DB_NAME}
      - WORDPRESS_REDIS_HOST=${WORDPRESS_REDIS_HOST}
      - WORDPRESS_REDIS_PASSWORD=${WORDPRESS_REDIS_PASSWORD}
    volumes:
      - wordpress_uploads:/var/www/html/wp-content/uploads  # Shared uploads directory
    depends_on:
      - mariadb  # Ensures the WordPress container starts after the MariaDB container
      - redis-1    # Ensures the WordPress container starts after the Redis container
    networks:
      - wp_network  # Connects to the defined network

  wordpress-2:
    build:
      context: .
      dockerfile: Dockerfile.wordpress
    restart: always
    environment:
      - WORDPRESS_DB_HOST=${WORDPRESS_DB_HOST}
      - WORDPRESS_DB_USER=${WORDPRESS_DB_USER}
      - WORDPRESS_DB_PASSWORD=${WORDPRESS_DB_PASSWORD}
      - WORDPRESS_DB_NAME=${WORDPRESS_DB_NAME}
      - WORDPRESS_REDIS_HOST=redis-2
      - WORDPRESS_REDIS_PASSWORD=${WORDPRESS_REDIS_PASSWORD}
    volumes:
      - wordpress_uploads:/var/www/html/wp-content/uploads  # Shared uploads directory
    depends_on:
      - mariadb
      - redis-2
    networks:
      - wp_network

  wordpress-3:
    build:
      context: .
      dockerfile: Dockerfile.wordpress
    restart: always
    environment:
      - WORDPRESS_DB_HOST=${WORDPRESS_DB_HOST}
      - WORDPRESS_DB_USER=${WORDPRESS_DB_USER}
      - WORDPRESS_DB_PASSWORD=${WORDPRESS_DB_PASSWORD}
      - WORDPRESS_DB_NAME=${WORDPRESS_DB_NAME}
      - WORDPRESS_REDIS_HOST=redis-1
      - WORDPRESS_REDIS_PASSWORD=${WORDPRESS_REDIS_PASSWORD}
    volumes:
      - wordpress_uploads:/var/www/html/wp-content/uploads  # Shared uploads directory
    depends_on:
      - mariadb
      - redis-1
    networks:
      - wp_network

  # MariaDB service configuration
  mariadb:
    image: mariadb:10  # Using official MariaDB 10 image
    restart: always  # Ensures the container restarts automatically if it fails
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql  # Persists the database data using a named volume
    networks:
      - wp_network  # Connects to the defined network

  # Redis service configurations
  redis-1:
    image: redis:7.2-alpine  # Using Alpine-based Redis 7.2 for smaller image size
    restart: always  # Ensures the container restarts automatically if it fails
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]  # Set Redis password
    ports:
      - "6379:6379"  # Expose Redis port (optional, for external access)
    volumes:
      - redis_data_1:/data  # Persists Redis data using a named volume
    networks:
      - wp_network  # Connects to the defined network
      
  redis-2:
    image: redis:7.2-alpine  # Using Alpine-based Redis 7.2 for smaller image size
    restart: always  # Ensures the container restarts automatically if it fails
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]  # Set Redis password
    ports:
      - "6380:6379"  # Expose Redis port on a different host port
    volumes:
      - redis_data_2:/data  # Persists Redis data using a named volume
    networks:
      - wp_network  # Connects to the defined network

  # phpMyAdmin service configuration
  phpmyadmin:
    build:
      context: .
      dockerfile: Dockerfile.phpmyadmin  # Using multi-stage build for optimization
    restart: always  # Ensures the container restarts automatically if it fails
    ports:
      - "8080:80"  # Exposes port 8080 on the host, mapped to container port 80
    environment:
      - PMA_HOST=${PMA_HOST}
      - PMA_USER=${PMA_USER}
      - PMA_PASSWORD=${PMA_PASSWORD}
    depends_on:
      - mariadb  # Ensures phpMyAdmin starts after the MariaDB container
    networks:
      - wp_network  # Connects to the defined network

  # Redis Exporter for redis-1
  redis-exporter-1:
    image: oliver006/redis_exporter:latest
    environment:
      - REDIS_ADDR=redis-1:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "9121:9121"
    depends_on:
      - redis-1
    networks:
      - wp_network

  # Redis Exporter for redis-2
  redis-exporter-2:
    image: oliver006/redis_exporter:latest
    environment:
      - REDIS_ADDR=redis-2:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "9122:9121"
    depends_on:
      - redis-2
    networks:
      - wp_network

  # MariaDB Exporter
  mariadb-exporter:
    image: prom/mysqld-exporter:latest
    environment:
      - DATA_SOURCE_NAME=wordpress:wordpress@(mariadb:3306)/
    ports:
      - "9104:9104"
    depends_on:
      - mariadb
    networks:
      - wp_network

  # NGINX Exporter
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    command:
      - -nginx.scrape-uri=http://nginx:80/stub_status
    ports:
      - "9113:9113"
    depends_on:
      - nginx
    networks:
      - wp_network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      - redis-exporter-1
      - redis-exporter-2
      - mariadb-exporter
      - nginx-exporter
    networks:
      - wp_network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - wp_network

# Volumes configuration
volumes:
  db_data:  # Named volume for persisting MariaDB data across container restarts
    # No additional configuration needed for a simple local volume
  redis_data_1:  # Named volume for persisting Redis-1 data across container restarts
    # No additional configuration needed for a simple local volume
  redis_data_2:  # Named volume for persisting Redis-2 data across container restarts
    # No additional configuration needed for a simple local volume
  wordpress_uploads:  # Shared volume for WordPress uploads
    driver: local  # Using local driver for development (use NFS or cloud storage in production)
  grafana_data:  # Named volume for persisting Grafana data across container restarts
    # No additional configuration needed for a simple local volume

# Networks configuration
networks:
  wp_network:  # Custom network for the three services to communicate
    driver: bridge  # Uses the standard bridge network driver
