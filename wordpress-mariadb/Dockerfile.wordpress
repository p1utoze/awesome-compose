FROM php:8.1-alpine AS builder

# Install only the necessary extensions
RUN apk add --no-cache \
    curl \
    tar \
    mysql-client \
    libpng-dev \
    libjpeg-turbo-dev \
    libzip-dev \
    libmemcached-dev \
    freetype-dev

# Install PHP extensions
RUN docker-php-ext-configure gd --with-freetype --with-jpeg && \
    docker-php-ext-install -j$(nproc) \
    mysqli \
    pdo \
    pdo_mysql \
    opcache \
    gd \
    zip

# Download WordPress
RUN curl -o wordpress.tar.gz -SL https://wordpress.org/wordpress-6.4.tar.gz && \
    tar -xzf wordpress.tar.gz -C /var/www/ && \
    rm wordpress.tar.gz && \
    chown -R www-data:www-data /var/www/wordpress

# Final stage with minimal components
FROM alpine:3.18

# Install Apache and PHP
RUN apk add --no-cache \
    php82 \
    php82-fpm \
    php82-mysqli \
    php82-pdo \
    php82-pdo_mysql \
    php82-gd \
    php82-xml \
    php82-curl \
    php82-mbstring \
    php82-opcache \
    php82-zip \
    php82-session \
    apache2 \
    apache2-proxy

# Copy WordPress files
COPY --from=builder /var/www/wordpress /var/www/html

# Configure Apache
RUN mkdir -p /run/apache2 && \
    sed -i 's#^DocumentRoot ".*#DocumentRoot "/var/www/html"#g' /etc/apache2/httpd.conf && \
    sed -i 's#Directory "/var/www/localhost/htdocs"#Directory "/var/www/html"#g' /etc/apache2/httpd.conf && \
    sed -i 's/^#LoadModule rewrite_module/LoadModule rewrite_module/g' /etc/apache2/httpd.conf && \
    sed -i 's#AllowOverride None#AllowOverride All#g' /etc/apache2/httpd.conf && \
    sed -i 's#^ServerName www.example.com:80#ServerName localhost#g' /etc/apache2/httpd.conf && \
    echo '<FilesMatch \.php$>' >> /etc/apache2/httpd.conf && \
    echo '    SetHandler "proxy:fcgi://127.0.0.1:9000"' >> /etc/apache2/httpd.conf && \
    echo '</FilesMatch>' >> /etc/apache2/httpd.conf && \
    echo 'DirectoryIndex index.php index.html' >> /etc/apache2/httpd.conf

# Copy and use script to create wp-config.php
COPY create-wp-config.sh /tmp/
RUN chmod +x /tmp/create-wp-config.sh && /tmp/create-wp-config.sh

# Set permissions
RUN chown -R apache:apache /var/www/html

WORKDIR /var/www/html

# Configure PHP-FPM
RUN sed -i 's/listen = 127.0.0.1:9000/listen = 9000/g' /etc/php82/php-fpm.d/www.conf && \
    sed -i 's/;listen.owner = nobody/listen.owner = apache/g' /etc/php82/php-fpm.d/www.conf && \
    sed -i 's/;listen.group = nobody/listen.group = apache/g' /etc/php82/php-fpm.d/www.conf && \
    sed -i 's/user = nobody/user = apache/g' /etc/php82/php-fpm.d/www.conf && \
    sed -i 's/group = nobody/group = apache/g' /etc/php82/php-fpm.d/www.conf

# Create entrypoint script
RUN echo -e '#!/bin/sh\nphp-fpm82 -D\nhttpd -D FOREGROUND' > /usr/local/bin/docker-entrypoint.sh && \
    chmod +x /usr/local/bin/docker-entrypoint.sh

EXPOSE 80
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
